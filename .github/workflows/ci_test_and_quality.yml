name: Cypress Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  cypress-tests:
    runs-on: ubuntu-22.04
    steps:
      # Étape 1 : Checkout du code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Étape 2 : Configurer Docker Buildx pour Docker Compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Démarrer les services avec Docker Compose
      - name: Start Services with Docker Compose
        run: docker compose -f compose.yaml up -d --build
        env :
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}

      # Étape 4 : Vérifier les conteneurs Docker en cours d'exécution
      - name: Check running Docker containers
        run: docker ps

      # Étape 5 : Vérifier les conteneurs stoppés pour diagnostiquer les erreurs
      - name: Check all Docker containers (including stopped)
        run: docker ps -a

      # Étape 6 : Afficher les logs Docker Compose pour diagnostiquer
      - name: Check Docker Compose Logs
        run: docker compose logs

      # Étape 7 : Attendre que tous les services soient prêts avec un timeout
      - name: Wait for services to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout=30000 \
                      http://localhost:4001 --timeout=30000 \
                      http://localhost:4002 --timeout=30000 \
                      http://localhost:4003 --timeout=30000

      # Étape 8 : Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Étape 9 : Nettoyer node_modules et package-lock.json
      - name: Clean Node Modules
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      # Étape 10 : Créer le dossier videos dans le bon emplacement
      - name: Create videos directory
        run: mkdir -p breizhsport-front/cypress/videos

      # Étape 11 : Installation des dépendances (y compris wait-on)
      - name: Install Dependencies
        run: npm install --save-dev wait-on

      # Étape 12 : Installation de Cypress (sans exécution des tests)
      - name: Cypress E2E Install
        uses: cypress-io/github-action@v6
        with:
          runTests: false

      # Étape 13 : Démarrer le serveur Angular en arrière-plan
      - name: Start Angular Server
        run: npx ng serve &
        env:
          NODE_OPTIONS: --openssl-legacy-provider

      # Étape 14 : Attendre que le serveur Angular soit prêt avec un timeout
      - name: Wait for Frontend to be ready
        run: npx wait-on http://localhost:4200 --timeout=30000

      # Étape 15 : Exécuter les tests Cypress
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          install: false

      # Étape 16 : Vérifier si les artefacts existent.
      - name: Check if artifacts exist
        id: check-artifacts
        run: |
          if [ -d "breizhsport-front/cypress/videos" ] || [ -d "breizhsport-front/cypress/screenshots" ]; then
            echo "artifacts_exist=true" >> $GITHUB_OUTPUT
          else
            echo "artifacts_exist=false" >> $GITHUB_OUTPUT
          fi

      # Étape 17 : Téléverser les artefacts (vidéos, screenshots, etc.)
      - name: Upload Cypress Artifacts
        if: always() && steps.check-artifacts.outputs.artifacts_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            breizhsport-front/cypress/videos
            breizhsport-front/cypress/screenshots
          retention-days: 3

      # Étape 18 : Arrêter et nettoyer les conteneurs Docker après les tests
      - name: Shutdown Docker Containers
        if: always()
        run: docker compose -f compose.yaml down

  publish-on-docker:
    needs: [cypress-tests]
    if: github.ref == 'refs/heads/main'
    uses: Breizhsport-2025-cube-3/breizhsport-infra/.github/workflows/publish_on_docker.yml@main
    secrets:
      tags: ${{ secrets.DOCKER_USERNAME }}/breizhsport-front:develop
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PAT: ${{ secrets.DOCKER_PAT }}
