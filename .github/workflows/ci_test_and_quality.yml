name: Cypress Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  cypress-tests:
    runs-on: ubuntu-22.04
    services:
      server:
        image: mathiskrr/breizhsport-front:develop
        env:
          CATEGORIES_SERVICE_URL: ${{secrets.CATEGORIES_SERVICE_URL}}
          PRODUCT_SERVICE_URL: ${{secrets.PRODUCT_SERVICE_URL}}
          CART_SERVICE_URL: ${{secrets.CART_SERVICE_URL}}
        ports:
          - 4200:4200
      api-gateway:
        image : mathiskrr/breizhsport-api-gateway:develop
        env:
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_DIALECT: ${{secrets.DB_DIALECT}}
          CATEGORIES_SERVICE_URL: ${{secrets.CATEGORIES_SERVICE_URL_LOCAL}}
          PRODUCT_SERVICE_URL: ${{secrets.PRODUCT_SERVICE_URL_LOCAL}}
          CART_SERVICE_URL: ${{secrets.CART_SERVICE_URL_LOCAL}}
        ports:
          - 3000:3000
      cart-service:
        image : mathiskrr/breizhsport-cart:develop
        env:
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_DIALECT: ${{secrets.DB_DIALECT}}
        ports:
          - 4001:4001
      product-service:
        image : mathiskrr/breizhsport-product:develop
        env:
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_DIALECT: ${{secrets.DB_DIALECT}}
        ports:
          - 4002:4002
      categorie-service:
        image : mathiskrr/breizhsport-category:develop
        env:
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_DIALECT: ${{secrets.DB_DIALECT}}
        ports:
          - 4003:4003
      
    steps:
      # Étape 1 : Checkout du code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Étape 2 : Créer un fichier .env pour Docker Compose.
      - name: Create .env file for Docker Compose
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
          echo "CATEGORIES_SERVICE_URL=${{secrets.CATEGORIES_SERVICE_URL}}" >> .env
          echo "PRODUCT_SERVICE_URL=${{secrets.PRODUCT_SERVICE_URL}}" >> .env
          echo "CART_SERVICE_URL=${{secrets.CART_SERVICE_URL}}" >> .env
          echo "CATEGORIES_SERVICE_URL_LOCAL=${{secrets.CATEGORIES_SERVICE_URL_LOCAL}}" >> .env
          echo "PRODUCT_SERVICE_URL_LOCAL=${{secrets.PRODUCT_SERVICE_URL_LOCAL}}" >> .env
          echo "CART_SERVICE_URL_LOCAL=${{secrets.CART_SERVICE_URL_LOCAL}}" >> .env
          echo "DOCKER_PAT=${{secrets.DOCKER_PAT}}" >> .env
          echo "DOCKER_USERNAME=${{secrets.DOCKER_USERNAME}}" >> .env

      # Étape 3 : Configurer Docker Buildx pour Docker Compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 5 : Vérifier les conteneurs Docker en cours d'exécution
      - name: Check running Docker containers
        run: docker ps

      # Étape 6 : Vérifier les conteneurs stoppés pour diagnostiquer les erreurs
      - name: Check all Docker containers (including stopped)
        run: docker ps -a

      # Étape 7 : Afficher les logs Docker Compose pour diagnostiquer
      - name: Check Docker Compose Logs
        run: docker compose logs

      # Étape 10 : Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Étape 11 : Nettoyer node_modules et package-lock.json
      - name: Clean Node Modules
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      # Étape 12 : Créer le dossier videos dans le bon emplacement
      # - name: Create videos directory
      #   run: mkdir -p breizhsport-front/cypress/videos

      # Étape 13 : Installation des dépendances
      - name: Install Dependencies
        run: npm install --save-dev

      # Étape 14 : Installation de Cypress (sans exécution des tests)
      # - name: Cypress E2E Install
      #   uses: cypress-io/github-action@v6
      #   with:
      #     runTests: false

      # # Étape 16 : Attendre que le serveur Angular soit prêt avec un timeout
      # - name: Wait for Frontend to be ready
      #   run: npx wait-on http://localhost:4200 --timeout=60000

      # Étape 17 : Exécuter les tests Cypress
      # - name: Run Cypress Tests
      #   uses: cypress-io/github-action@v6
      #   with:
      #     install: false

      # Étape 18 : Vérifier si les artefacts existent.
      # - name: Check if artifacts exist
      #   id: check-artifacts
      #   run: |
      #     if [ -d "breizhsport-front/cypress/videos" ] || [ -d "breizhsport-front/cypress/screenshots" ]; then
      #       echo "artifacts_exist=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "artifacts_exist=false" >> $GITHUB_OUTPUT
      #     fi

      # # Étape 19 : Téléverser les artefacts (vidéos, screenshots, etc.)
      # - name: Upload Cypress Artifacts

      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cypress-artifacts
      #     path: |
      #       breizhsport-front/cypress/videos
      #       breizhsport-front/cypress/screenshots
      #     retention-days: 3

      # Étape 20 : Arrêter et nettoyer les conteneurs Docker après les tests..
      # - name: Shutdown Docker Containers

      #   run: docker compose --env-file .env -f compose.yaml down

  publish-on-docker:
    needs: [cypress-tests]
    if: github.ref == 'refs/heads/main'
    uses: Breizhsport-2025-cube-3/breizhsport-infra/.github/workflows/publish_on_docker.yml@main
    secrets:
      tags: ${{ secrets.DOCKER_USERNAME }}/breizhsport-front:v0.1
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PAT: ${{ secrets.DOCKER_PAT }}
